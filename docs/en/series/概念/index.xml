<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概念 on 知行合一</title>
    <link>https://fabletang.github.io/en/series/%E6%A6%82%E5%BF%B5/</link>
    <description>Recent content in 概念 on 知行合一</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2016-{year} Fable Tang. All Rights Reserved.</copyright>
    <lastBuildDate>Fri, 14 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://fabletang.github.io/en/series/%E6%A6%82%E5%BF%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微信to-淘宝</title>
      <link>https://fabletang.github.io/en/posts/2023-04-14-tbtest/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/en/posts/2023-04-14-tbtest/</guid>
      <description> 此h5只是验证lulu技术可行性，点击 http://vip100.ltd/Qt0vVjBc 相当于下图立即购买按钮 此h5只是验证lulu技术可行性，点击 https://m.tb.cn/h.UsUePG8 相当于下图立即购买按钮 [1] youjiangaoshan [2] lulu </description>
    </item>
    
    <item>
      <title>Golang GMP调度</title>
      <link>https://fabletang.github.io/en/posts/2021-12-06-golang_gmp/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/en/posts/2021-12-06-golang_gmp/</guid>
      <description>一、GMP “调度器” 的由来 单进程时代不需要调度器 早期的操作系统每个程序就是一个进程，直到一个程序运行完，才能进行下一个进程，就是 “单进程时代”.自动化控制中的PLC也是典型的单进程操作系统。
多进程 / 线程时代有了调度器需求 典型的操作系统unix/linux,对进程/线程进行了管理。
goroutine是比线程更轻量级的协程 goroutine是golang独有的概念,是为了更少的内存和cpu开销，比线程更加轻量，可以看作是线程的&amp;quot;son&amp;quot;.很明显操作系统管理不了，所以出现了GMP.
二、GMP 定义 G=goroutine,M=mechine,P=processor. 三、GMP 模型 在 Go 中，线程(M)是运行 goroutine 的实体，调度器的功能是把可运行的 goroutine 分配到工作线程上。 全局队列（Global Queue）：存放等待运行的 G。 P 的本地队列：同全局队列类似，存放的也是等待运行的 G，存的数量有限，不超过 256 个。新建 G时，G优先加入到 P 的本地队列，如果队列满了，则会把本地队列中一半的 G 移动到全局队列。 P 列表：所有的 P 都在程序启动时创建，并保存在数组中，最多有 GOMAXPROCS(可配置) 个。 M：线程想运行任务就得获取 P，从 P 的本地队列获取 G，P 队列为空时，M 也会尝试从全局队列拿一批 G 放到 P 的本地队列，或从其他 P 的本地队列偷一半放到自己 P 的本地队列。M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。 三、GMP 设计策略 复用线程：避免频繁的创建、销毁线程，而是对线程的复用。
work stealing 机制</description>
    </item>
    
    <item>
      <title>并发与并行</title>
      <link>https://fabletang.github.io/en/posts/2021-12-06-concurrency_parallelism/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/en/posts/2021-12-06-concurrency_parallelism/</guid>
      <description>为了让程序更好地利用计算机资源，出现了进程/线程，以及并发模式和并行模式的概念。
一、进程和线程 A. 进程是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。 B. 线程是进程的一个执行实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。 C. 一个进程可以创建和撤销多个线程;同一个进程中的多个线程之间可以并发执行。 二、并发和并行 A. 多线程程序在一个核的cpu上运行，就是并发。 B. 多线程程序在多个核的cpu上运行，就是并行。
如图所示: 三、并发和并行的效率比较 如上图所示，假定任务A/B/C均衡分配，并行效率更高，因为并发切换线程需要cpu开销(图中树立的双虚线)。
但是为什么绝大多少操作系统，应用程序采用并发的机制呢？因为并行和并发是以CPU来区分，大多数场景下，需要磁盘IO、网络IO，这些IO耗时远远大于cpu耗时,所以大部分情况下并发更能充分利用计算机资源。超级计算机，比如银河超级计算机，这类计算机专注于CPU计算，所以采用并行的操作系统和程序。
四、协程和线程 随着互联网的发展，C10k问题（即单机 10000 个并发连接）出现了。CPU硬件发展不能再遵守摩尔定律,1万个线程切换的耗时变得不能承受.操作系统层面，采用epoll类似的IO多路复用技术来减少线程数.
golang在语言层面采用goroutine协程减少线程开销。
协程：独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的。 线程：一个线程上可以跑多个协程，协程是轻量级的线程，多数情况下，每个线程至少需要占用内存1MB。 每个goroutine协程2KB的栈内存占用, 采用GMP机制管理. </description>
    </item>
    
    <item>
      <title>关系型数据库实践</title>
      <link>https://fabletang.github.io/en/posts/2021-11-09-practice_of_db/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/en/posts/2021-11-09-practice_of_db/</guid>
      <description>关系型数据库是绝大多数系统的数据核心,这个关键设施也往往是性能的瓶颈。以下是一些使用建议。
按业务场景设计表结构 业务场景: 一个mysql的用户表，1000万条记录，如何查询出当天生日的用户？
表结构通用规则 所有字段必须非空而且有默认值。 一般都有创建时间和更新时间字段，mysql5.6+ 支持数据库本身更新此字段。 尽可能不使用TEXT、BLOB类型. 表字符集尽量选择UTF8MB4,mysql的utf8不是标准的字符集，utf8mb4可以存储表情字符。 索引字段尽可能使用int/long, 索引为字符型不能超过32个字符。 注释尽量清楚 建表的时候应该考虑最终的数据量，mysql单表应该不超过1000万,分布式数据库按业务字段分区。 不使用外键，尽量少用联合唯一束缚。联合主键酌情使用。 查询最佳实践 互联网业务场景,数据库瓶颈一般出现在查询。
查询一般不关联超过3个表。 查询扫码记录数超过10万条，必须命中索引。 避免使用inner join，left join 语句中的主表应该是结果数据量最少的表。 where语句最左原则，最靠近where的条件应该是索引，应该是可以最大限度缩小查询范围的条件。 避免破坏索引的不规范语句，比如id=&amp;lsquo;1&amp;rsquo;,类型转换会忽略索引,比如 like %xxx%,模糊匹配也会破坏索引。 尽量少用数据库特殊函数，影响性能也不好迁移。 尽量少用group by/max/sum,如果是高频调用的sql, 意味着表结构不合理。 禁止使用 select *，不知道需要返回的字段，意味着不理解业务。 通用最佳实践 查询语句复杂，往往是缺状态字段或者缺统计表。 应该手写sql,反对使用所谓面向对象的orm中间件，比如hibernate,mybaits-plus。 单个api的sql语句一般不超过3条。 3次以上数据库交互，响应速度就很差。 读写分离,实时性要求不高的查询，应该走从库。互联的mysql 一般是1主3+从. 数据强一致,并且并发高的情况下(间隙锁)，事务提交不能解决问题的话，考虑乐观事务(version字段)以及分布式全局锁（redis/zookeeper） </description>
    </item>
    
    <item>
      <title>微服务的粒度</title>
      <link>https://fabletang.github.io/en/posts/2017-04-01-granularity_of_microservice/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/en/posts/2017-04-01-granularity_of_microservice/</guid>
      <description>得益于nginx等反向代理的流行以及metrics/endpoit规范的成熟。微服务的理念开始流行了。 但是微服务究竟要多&amp;quot;微&amp;quot;才合适？以下是我的个人实践。
不能按接口分: 这样的粒度太细.比如新增订单/查询订单分为两个microservice,优点是可以根据各自的负载合理分配服务器 资源。缺点是microservice数量过多，这样拆分的话，至少存在几十个service，这样对service的依赖关系，监控 ／部署都增加很大的难度。
不能按数据库表名(table)分: 这是个鲁莽的做法。很明显，数据库的的事务处理将极为棘手。
不能按数据库名(db)分: 这样的粒度太粗.好处是本地数据库数据一致性问题很好解决。缺点是功能过于集中，不利于后期改进。
建议按子业务分，同时考虑数据库表的关联: 比如按订单/用户管理这样的粒度分，数据库表相对独立。这样service的数量较为合适，语意上也容易理解。</description>
    </item>
    
    <item>
      <title>stateless server 最佳实践</title>
      <link>https://fabletang.github.io/en/posts/2017-01-01-stateless_server/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/en/posts/2017-01-01-stateless_server/</guid>
      <description>stateless server 即无状态服务。相对与传统的http server存在session,无session的 http server称为stateless server，现在一般应用于restful service.
Why: session的概念存在这么多年，一定有其合理之处,为什么要抛弃它?
session的起源: session根源于http的cookie. http协议本身是无状态的协议，server是一问一答，答后不管。为了加入 状态，来辨识是否访问／是否登录的需要，加入了cookie。服务器的session就是对应浏览器端的cookie.
为什么抛弃session:
高并发的访问，session制约了server的水平扩展。在负载均衡的多个server群，虽然可以用高速缓存比 如redis来管理全局session.但是毕竟多存在了一个节点，削弱了系统稳定性。
session需要资源开销，在tomcat中，每个session至少耗费4k内存。
session存在安全缺陷，一般session会以明文形式写入cookie,cookie是保存在浏览器端的硬盘，由此引发 的安全问题可以写成一本书了。即使禁用cookie, session也容易被窃取，CSRF跨域攻击就是窃取session的 安全问题。
随着server的功能增多，有时候需要跨域访问的时候，session成为了障碍。比如网页需要访问两个服务器的 资源，而且都必须要要登录授权保持状态,这样需要两个sessionid,但是浏览器只支持单一session.
What: stateless server是否就是服务器不需要state状态？ 需要授权的资源如果不保存其状态，比如用户id／角色。每次访问都要重新提交验证信息。服务器可能要重复 验证／查询数据库,这样会带来额外的资源开销。 所以，stateless应该理解为服务器不保存状态。
How: server需要状态，但是不保存状态。怎么做？ 采用jwt,状态保存在客户端。jwt 即json web token. server 把状态放入jwt,加密，以字符串的方式发送给客户端。
采用jwt的好处:
可以封装状态，以key／value字符的形式保存状态。 安全。jwt一般采用对称或者非对称加密。加密密钥存放在server.可以防止jwt被篡改。jwt同时有时效性，合适的有效期可以减少重放攻击的可能性。 </description>
    </item>
    
  </channel>
</rss>
