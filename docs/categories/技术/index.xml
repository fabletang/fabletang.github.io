<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Fable&#39;s blog</title>
    <link>https://fabletang.github.io/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Fable&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Fable Tang. All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 30 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://fabletang.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为Go开发配置vscode</title>
      <link>https://fabletang.github.io/posts/2023-05-30-vscode-golang/</link>
      <pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2023-05-30-vscode-golang/</guid>
      <description>1. 安装 Go 按照以下步骤安装 Go： 在 Web 浏览器中，转到 “go.dev/doc/install”。 下载操作系统的版本。 下载后，运行安装程序。 打开命令</description>
    </item>
    
    <item>
      <title>微信to-淘宝</title>
      <link>https://fabletang.github.io/posts/2023-04-14-tbtest/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2023-04-14-tbtest/</guid>
      <description>此h5只是验证lulu技术可行性，点击 http://vip100.ltd/Qt0vVjBc 相当于下图立即购买按钮 此h5只是验证lulu技术可行性，点击 https://m.tb.cn/h.UsUePG8 相当于下图立即购买按钮 [1] youjiangaoshan [2] lulu</description>
    </item>
    
    <item>
      <title>Golang GMP调度</title>
      <link>https://fabletang.github.io/posts/2021-12-06-golang_gmp/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-12-06-golang_gmp/</guid>
      <description>一、GMP “调度器” 的由来 单进程时代不需要调度器 早期的操作系统每个程序就是一个进程，直到一个程序运行完，才能进行下一个进程，就是 “单进程时代</description>
    </item>
    
    <item>
      <title>并发与并行</title>
      <link>https://fabletang.github.io/posts/2021-12-06-concurrency_parallelism/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-12-06-concurrency_parallelism/</guid>
      <description>为了让程序更好地利用计算机资源，出现了进程/线程，以及并发模式和并行模式的概念。 一、进程和线程 A. 进程是程序在操作系统中的一次执行过程，系统进</description>
    </item>
    
    <item>
      <title>vim 窗口相关(三)</title>
      <link>https://fabletang.github.io/posts/2021-11-30-vim_windows/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-11-30-vim_windows/</guid>
      <description>一、vim 窗口类别 1.文本窗口: 主窗口，文本区。 2.buffer窗口: vim运行期间的缓冲文件列表。关闭后清零。 打开: &amp;ldquo;:ls&amp;rdquo; 关闭: &amp;lt;ESC</description>
    </item>
    
    <item>
      <title>vim 文件相关(四)</title>
      <link>https://fabletang.github.io/posts/2021-11-30-vim_file/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-11-30-vim_file/</guid>
      <description>一、vim 文件管理相关 插件: &amp;#34; 文件管理插件 Plug &amp;#39;preservim/nerdtree&amp;#39; Plug &amp;#39;Xuyuanp/nerdtree-git-plugin&amp;#39; &amp;#34; 历史文件增强 :browse oldfiles Plug &amp;#39;gpanders/vim-oldfiles&amp;#39; 配置: &amp;#34; NERDTree插件的快捷键 nn &amp;lt;silent&amp;gt; &amp;lt;F5&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt; &amp;#34;自动启动ner</description>
    </item>
    
    <item>
      <title>vim 配置(二)</title>
      <link>https://fabletang.github.io/posts/2021-11-24-vim_conf/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-11-24-vim_conf/</guid>
      <description>一、vim安装插件管理器 早期的vim插件需要在网站下载，然后复制到对应目录.（https://www.vim.org/scripts/ind</description>
    </item>
    
    <item>
      <title>vim 入门(一)</title>
      <link>https://fabletang.github.io/posts/2021-11-22-vim_tutor/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-11-22-vim_tutor/</guid>
      <description>一、vim起源 vim至今30年历史了，vim是&amp;quot;Vi Improved&amp;quot;的缩写，由vi发展而来. vi是unix系统默认编辑</description>
    </item>
    
    <item>
      <title>Golang介绍</title>
      <link>https://fabletang.github.io/posts/2021-11-18-introduce_of_golang/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-11-18-introduce_of_golang/</guid>
      <description>目前golang最新版本为1.17.3，经过12年的发展，生态已经成熟。 Go是一门工程语言 go诞生的初衷就是解决c/c++的各种弊端，提高生</description>
    </item>
    
    <item>
      <title>关系型数据库实践</title>
      <link>https://fabletang.github.io/posts/2021-11-09-practice_of_db/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-11-09-practice_of_db/</guid>
      <description>关系型数据库是绝大多数系统的数据核心,这个关键设施也往往是性能的瓶颈。以下是一些使用建议。 按业务场景设计表结构 业务场景: 一个mysql的用户</description>
    </item>
    
    <item>
      <title>java模式:单例/多例/线程单例</title>
      <link>https://fabletang.github.io/posts/2021-02-26-java_singleten_pattern/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-02-26-java_singleten_pattern/</guid>
      <description>java单例模式有5种实现方式,推荐以下3种方式. 一、单例-饿汉式: 特点:线程安全，不能延时加载 public enum SingletonDemo1 { //枚举元素本身就是单例 INSTANCE; //添加自</description>
    </item>
    
    <item>
      <title>docker tips</title>
      <link>https://fabletang.github.io/posts/2017-09-16-docker_tips/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-09-16-docker_tips/</guid>
      <description>一、docker rmi: 使用多个images id删除,前四位、空格区分 docker rmi 861b 7d51 过滤批量删除镜像, 对docker images 显示的行进行过滤。 根据tag名删除</description>
    </item>
    
    <item>
      <title>docker私有仓库搭建</title>
      <link>https://fabletang.github.io/posts/2017-09-01-docker_registry/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-09-01-docker_registry/</guid>
      <description>环境:centos7,docker 1.12+，registry 2. 一、准备工作: mkdir /data/docker-registry mkdir /data/docker-registry-auth 二、安全设置: 生成 http 密码文件 docker run --entrypoint htpasswd registry:2 -Bbn anycloud &amp;#39;123&amp;#39;&amp;gt; /data/docker-registry-auth/htpasswd 获取 SSL 证</description>
    </item>
    
    <item>
      <title>Golang代码结构</title>
      <link>https://fabletang.github.io/posts/2017-05-01-the_struct_of_go_project/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-05-01-the_struct_of_go_project/</guid>
      <description>Go的设计思想是代码至上，依赖于代码而不是象其它语言依赖于编译好的库。尽管go的版本号已经到1.8.1了,但是还没没有好的package版本</description>
    </item>
    
    <item>
      <title>微服务的粒度</title>
      <link>https://fabletang.github.io/posts/2017-04-01-granularity_of_microservice/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-04-01-granularity_of_microservice/</guid>
      <description>得益于nginx等反向代理的流行以及metrics/endpoit规范的成熟。微服务的理念开始流行了。 但是微服务究竟要多&amp;quot;微&amp;qu</description>
    </item>
    
    <item>
      <title>stateless server 最佳实践</title>
      <link>https://fabletang.github.io/posts/2017-01-01-stateless_server/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-01-01-stateless_server/</guid>
      <description>stateless server 即无状态服务。相对与传统的http server存在session,无session的 http server称为stateless server，现</description>
    </item>
    
    <item>
      <title>Grails框架介绍</title>
      <link>https://fabletang.github.io/posts/2014-12-25-grails_intro/</link>
      <pubDate>Thu, 25 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-12-25-grails_intro/</guid>
      <description>Grails是一套用于快速Web应用开发的开源框架，它基于Groovy编程语言，并构建于Spring、Hibernate等开源框架之上，是一</description>
    </item>
    
    <item>
      <title>Gradle 介绍</title>
      <link>https://fabletang.github.io/posts/2014-10-13-introduce-gradle/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-10-13-introduce-gradle/</guid>
      <description>gradle 现在已经2.1版本了。从1.0版本就一直关注这个groovy项目，但是没有应用到 公司项目的打算，但是现在时机到了。gradle已经是最好的</description>
    </item>
    
    <item>
      <title>Android Studio 配置</title>
      <link>https://fabletang.github.io/posts/2014-09-30-android-studio-conf/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-09-30-android-studio-conf/</guid>
      <description>由于长期在linux下做开发，严重依赖linux的各种小方便，然而需要参与一个Android项目。 项目里有公司开发的.so，涉及了JNI。开</description>
    </item>
    
    <item>
      <title>Ubuntu下Android USB联机调试</title>
      <link>https://fabletang.github.io/posts/2014-09-29-android-usb-ubunit/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-09-29-android-usb-ubunit/</guid>
      <description>环境说明: Ubuntu 14.04, android ADT 4.2.2 Linux 下 ADT usb联机调试出现 device unknown 的解决办法: 一、使用lsusb命令查看设备的vendorId和productId。 插入usb</description>
    </item>
    
  </channel>
</rss>
