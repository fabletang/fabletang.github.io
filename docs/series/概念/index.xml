<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概念 on Fable&#39;s blog</title>
    <link>https://fabletang.github.io/series/%E6%A6%82%E5%BF%B5/</link>
    <description>Recent content in 概念 on Fable&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Fable Tang. All Rights Reserved.</copyright>
    <lastBuildDate>Fri, 14 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://fabletang.github.io/series/%E6%A6%82%E5%BF%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微信to-淘宝</title>
      <link>https://fabletang.github.io/posts/2023-04-14-tbtest/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2023-04-14-tbtest/</guid>
      <description>链接 点击 https://m.tb.cn/h.UsUePG8 测试 [1] youjiangaoshan [2] lulu</description>
    </item>
    
    <item>
      <title>Golang GMP调度</title>
      <link>https://fabletang.github.io/posts/2021-12-06-golang_gmp/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-12-06-golang_gmp/</guid>
      <description>一、GMP “调度器” 的由来 单进程时代不需要调度器 早期的操作系统每个程序就是一个进程，直到一个程序运行完，才能进行下一个进程，就是 “单进程时代</description>
    </item>
    
    <item>
      <title>并发与并行</title>
      <link>https://fabletang.github.io/posts/2021-12-06-concurrency_parallelism/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-12-06-concurrency_parallelism/</guid>
      <description>为了让程序更好地利用计算机资源，出现了进程/线程，以及并发模式和并行模式的概念。 一、进程和线程 A. 进程是程序在操作系统中的一次执行过程，系统进</description>
    </item>
    
    <item>
      <title>关系型数据库实践</title>
      <link>https://fabletang.github.io/posts/2021-11-09-practice_of_db/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-11-09-practice_of_db/</guid>
      <description>关系型数据库是绝大多数系统的数据核心,这个关键设施也往往是性能的瓶颈。以下是一些使用建议。 按业务场景设计表结构 业务场景: 一个mysql的用户</description>
    </item>
    
    <item>
      <title>微服务的粒度</title>
      <link>https://fabletang.github.io/posts/2017-04-01-granularity_of_microservice/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-04-01-granularity_of_microservice/</guid>
      <description>得益于nginx等反向代理的流行以及metrics/endpoit规范的成熟。微服务的理念开始流行了。 但是微服务究竟要多&amp;quot;微&amp;qu</description>
    </item>
    
    <item>
      <title>stateless server 最佳实践</title>
      <link>https://fabletang.github.io/posts/2017-01-01-stateless_server/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-01-01-stateless_server/</guid>
      <description>stateless server 即无状态服务。相对与传统的http server存在session,无session的 http server称为stateless server，现</description>
    </item>
    
  </channel>
</rss>
