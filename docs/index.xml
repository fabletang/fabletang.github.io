<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fable&#39;s blog</title>
    <link>https://fabletang.github.io/</link>
    <description>Recent content on Fable&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2016-{year} Fable Tang. All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 09 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fabletang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关系型数据库实践</title>
      <link>https://fabletang.github.io/posts/2021-11-09-practice_of_db/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-11-09-practice_of_db/</guid>
      <description>关系型数据库是绝大多数系统的数据核心,这个关键设施也往往是性能的瓶颈。以下是一些使用建议。 按业务场景设计表结构 业务场景: 一个mysql的用户</description>
    </item>
    
    <item>
      <title>技术管理-管理、人性与OKR</title>
      <link>https://fabletang.github.io/posts/2021-04-22-methodology_2/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-04-22-methodology_2/</guid>
      <description>管理 一、管理的历史 奴隶社会 封建社会 现代社会 工业：流水线\六西格玛\丰田管理(看板) 软件开发： 瀑布式\快速迭代\XP极限编程\scrum敏捷开</description>
    </item>
    
    <item>
      <title>java模式:单例/多例/线程单例</title>
      <link>https://fabletang.github.io/posts/2021-02-26-java_singleten_pattern/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-02-26-java_singleten_pattern/</guid>
      <description>java单例模式有5种实现方式,推荐以下3种方式. 一、单例-饿汉式: 特点:线程安全，不能延时加载 public enum SingletonDemo1 { //枚举元素本身就是单例 INSTANCE; //添加自</description>
    </item>
    
    <item>
      <title>技术管理-怎么学</title>
      <link>https://fabletang.github.io/posts/2021-02-17-methodology_1/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2021-02-17-methodology_1/</guid>
      <description>很多技术人不喜欢管理，就像古代书生怕碰到铜钱，沾染了“铜臭”变得不纯洁了。 管理，第一是对自我的管理,自己的工作方式。不要把管理想象成奴役他人</description>
    </item>
    
    <item>
      <title>docker tips</title>
      <link>https://fabletang.github.io/posts/2017-09-16-docker_tips/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-09-16-docker_tips/</guid>
      <description>一、docker rmi: 使用多个images id删除,前四位、空格区分 docker rmi 861b 7d51 过滤批量删除镜像, 对docker images 显示的行进行过滤。 根据tag名删除</description>
    </item>
    
    <item>
      <title>docker私有仓库搭建</title>
      <link>https://fabletang.github.io/posts/2017-09-01-docker_registry/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-09-01-docker_registry/</guid>
      <description>环境:centos7,docker 1.12+，registry 2. 一、准备工作: mkdir /data/docker-registry mkdir /data/docker-registry-auth 二、安全设置: 生成 http 密码文件 docker run --entrypoint htpasswd registry:2 -Bbn anycloud &amp;#39;123&amp;#39;&amp;gt; /data/docker-registry-auth/htpasswd 获取 SSL 证</description>
    </item>
    
    <item>
      <title>Golang代码结构</title>
      <link>https://fabletang.github.io/posts/2017-05-01-the_struct_of_go_project/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-05-01-the_struct_of_go_project/</guid>
      <description>Go的设计思想是代码至上，依赖于代码而不是象其它语言依赖于编译好的库。尽管go的版本号已经到1.8.1了,但是还没没有好的package版本</description>
    </item>
    
    <item>
      <title>微服务的粒度</title>
      <link>https://fabletang.github.io/posts/2017-04-01-granularity_of_microservice/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-04-01-granularity_of_microservice/</guid>
      <description>得益于nginx等反向代理的流行以及metrics/endpoit规范的成熟。微服务的理念开始流行了。 但是微服务究竟要多&amp;quot;微&amp;qu</description>
    </item>
    
    <item>
      <title>stateless server 最佳实践</title>
      <link>https://fabletang.github.io/posts/2017-01-01-stateless_server/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2017-01-01-stateless_server/</guid>
      <description>stateless server 即无状态服务。相对与传统的http server存在session,无session的 http server称为stateless server，现</description>
    </item>
    
    <item>
      <title>关于软件项目计划的看法</title>
      <link>https://fabletang.github.io/posts/2015-10-06-project-schedule/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2015-10-06-project-schedule/</guid>
      <description>&amp;ldquo;凡事预则立 不预则废&amp;rdquo;,这是&amp;laquo;礼记&amp;raquo;中的名言,意思是任何事情不作计划就会失败。 软件项目也一样</description>
    </item>
    
    <item>
      <title>Grails框架介绍</title>
      <link>https://fabletang.github.io/posts/2014-12-25-grails_intro/</link>
      <pubDate>Thu, 25 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-12-25-grails_intro/</guid>
      <description>Grails是一套用于快速Web应用开发的开源框架，它基于Groovy编程语言，并构建于Spring、Hibernate等开源框架之上，是一</description>
    </item>
    
    <item>
      <title>养金鱼</title>
      <link>https://fabletang.github.io/posts/2014-10-19-goldfish/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-10-19-goldfish/</guid>
      <description>鄙人喜欢狗，对养鱼这种雅趣向来不屑一顾。几个月前儿子笑盈盈地提着一个透明小水盒， 得意的炫耀他钓的金鱼。原来是公园的付费小娱乐，每次十元，规定</description>
    </item>
    
    <item>
      <title>Gradle 介绍</title>
      <link>https://fabletang.github.io/posts/2014-10-13-introduce-gradle/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-10-13-introduce-gradle/</guid>
      <description>gradle 现在已经2.1版本了。从1.0版本就一直关注这个groovy项目，但是没有应用到 公司项目的打算，但是现在时机到了。gradle已经是最好的</description>
    </item>
    
    <item>
      <title>Android Studio 配置</title>
      <link>https://fabletang.github.io/posts/2014-09-30-android-studio-conf/</link>
      <pubDate>Tue, 30 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-09-30-android-studio-conf/</guid>
      <description>由于长期在linux下做开发，严重依赖linux的各种小方便，然而需要参与一个Android项目。 项目里有公司开发的.so，涉及了JNI。开</description>
    </item>
    
    <item>
      <title>Ubuntu下Android USB联机调试</title>
      <link>https://fabletang.github.io/posts/2014-09-29-android-usb-ubunit/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://fabletang.github.io/posts/2014-09-29-android-usb-ubunit/</guid>
      <description>环境说明: Ubuntu 14.04, android ADT 4.2.2 Linux 下 ADT usb联机调试出现 device unknown 的解决办法: 一、使用lsusb命令查看设备的vendorId和productId。 插入usb</description>
    </item>
    
  </channel>
</rss>
